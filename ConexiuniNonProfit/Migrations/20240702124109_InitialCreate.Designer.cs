// <auto-generated />
using System;
using ConexiuniNonProfit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConexiuniNonProfit.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240702124109_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConexiuniNonProfit.Models.Actiuni", b =>
                {
                    b.Property<int>("ActiuniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiuniId"));

                    b.Property<string>("ActiuniAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiuniDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiuniName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiuniId");

                    b.ToTable("Actiuni");

                    b.HasData(
                        new
                        {
                            ActiuniId = 1,
                            ActiuniAbbreviation = "DS",
                            ActiuniDescription = "Actiune de donare de sânge",
                            ActiuniName = "Donare de sânge"
                        },
                        new
                        {
                            ActiuniId = 2,
                            ActiuniAbbreviation = "DO",
                            ActiuniDescription = "Actiune de donare de organe",
                            ActiuniName = "Donare de organe"
                        },
                        new
                        {
                            ActiuniId = 3,
                            ActiuniAbbreviation = "DH",
                            ActiuniDescription = "Actiune de donare de haine",
                            ActiuniName = "Donare de haine"
                        },
                        new
                        {
                            ActiuniId = 4,
                            ActiuniAbbreviation = "DA",
                            ActiuniDescription = "Actiune de donare de alimente",
                            ActiuniName = "Donare de alimente"
                        },
                        new
                        {
                            ActiuniId = 5,
                            ActiuniAbbreviation = "DB",
                            ActiuniDescription = "Actiune de donare de bani",
                            ActiuniName = "Donare de bani"
                        },
                        new
                        {
                            ActiuniId = 6,
                            ActiuniAbbreviation = "VE",
                            ActiuniDescription = "Actiune de voluntariat în domeniul educației",
                            ActiuniName = "Voluntariat educațional"
                        },
                        new
                        {
                            ActiuniId = 7,
                            ActiuniAbbreviation = "VM",
                            ActiuniDescription = "Actiune de voluntariat pentru protecția mediului",
                            ActiuniName = "Voluntariat de mediu"
                        },
                        new
                        {
                            ActiuniId = 8,
                            ActiuniAbbreviation = "VS",
                            ActiuniDescription = "Actiune de voluntariat pentru ajutorarea persoanelor defavorizate",
                            ActiuniName = "Voluntariat social"
                        },
                        new
                        {
                            ActiuniId = 9,
                            ActiuniAbbreviation = "VC",
                            ActiuniDescription = "Actiune de voluntariat în domeniul culturii",
                            ActiuniName = "Voluntariat cultural"
                        },
                        new
                        {
                            ActiuniId = 10,
                            ActiuniAbbreviation = "MC",
                            ActiuniDescription = "Organizare de maratoane pentru strângere de fonduri",
                            ActiuniName = "Maraton caritabil"
                        },
                        new
                        {
                            ActiuniId = 11,
                            ActiuniAbbreviation = "CC",
                            ActiuniDescription = "Organizare de concerte pentru strângere de fonduri",
                            ActiuniName = "Concert caritabil"
                        },
                        new
                        {
                            ActiuniId = 12,
                            ActiuniAbbreviation = "TC",
                            ActiuniDescription = "Organizare de târguri pentru strângere de fonduri",
                            ActiuniName = "Târg caritabil"
                        },
                        new
                        {
                            ActiuniId = 13,
                            ActiuniAbbreviation = "CFC",
                            ActiuniDescription = "Organizare de conferințe pentru strângere de fonduri",
                            ActiuniName = "Conferință caritabilă"
                        },
                        new
                        {
                            ActiuniId = 14,
                            ActiuniAbbreviation = "CCL",
                            ActiuniDescription = "Campanie pentru conștientizarea leucemiei",
                            ActiuniName = "Campanie de conștientizare leucemie"
                        },
                        new
                        {
                            ActiuniId = 15,
                            ActiuniAbbreviation = "SPL",
                            ActiuniDescription = "Activități de sprijin pentru pacienții cu leucemie și familiile acestora",
                            ActiuniName = "Sprijin pentru pacienți cu leucemie"
                        },
                        new
                        {
                            ActiuniId = 16,
                            ActiuniAbbreviation = "SFL",
                            ActiuniDescription = "Evenimente de strângere de fonduri pentru leucemie",
                            ActiuniName = "Strângere de fonduri pentru leucemie"
                        },
                        new
                        {
                            ActiuniId = 17,
                            ActiuniAbbreviation = "AR",
                            ActiuniDescription = "Activități de reabilitare pentru persoane cu dizabilități",
                            ActiuniName = "Activități de reabilitare"
                        },
                        new
                        {
                            ActiuniId = 18,
                            ActiuniAbbreviation = "ES",
                            ActiuniDescription = "Programe de educație pentru sănătate",
                            ActiuniName = "Educație pentru sănătate"
                        },
                        new
                        {
                            ActiuniId = 19,
                            ActiuniAbbreviation = "PDO",
                            ActiuniDescription = "Proiecte pentru promovarea și apărarea drepturilor omului",
                            ActiuniName = "Proiecte pentru drepturile omului"
                        },
                        new
                        {
                            ActiuniId = 20,
                            ActiuniAbbreviation = "ARF",
                            ActiuniDescription = "Activități de ajutorare a refugiaților",
                            ActiuniName = "Ajutor pentru refugiați"
                        },
                        new
                        {
                            ActiuniId = 21,
                            ActiuniAbbreviation = "AMG",
                            ActiuniDescription = "Programe de asistență medicală gratuită",
                            ActiuniName = "Asistență medicală gratuită"
                        },
                        new
                        {
                            ActiuniId = 22,
                            ActiuniAbbreviation = "EF",
                            ActiuniDescription = "Programe de educație financiară",
                            ActiuniName = "Educație financiară"
                        },
                        new
                        {
                            ActiuniId = 23,
                            ActiuniAbbreviation = "SPV",
                            ActiuniDescription = "Activități de sprijin pentru persoanele vârstnice",
                            ActiuniName = "Sprijin pentru persoane vârstnice"
                        },
                        new
                        {
                            ActiuniId = 24,
                            ActiuniAbbreviation = "SC",
                            ActiuniDescription = "Activități de sprijin pentru copii",
                            ActiuniName = "Sprijin pentru copii"
                        },
                        new
                        {
                            ActiuniId = 25,
                            ActiuniAbbreviation = "SF",
                            ActiuniDescription = "Programe de sprijin pentru femei",
                            ActiuniName = "Sprijin pentru femei"
                        },
                        new
                        {
                            ActiuniId = 26,
                            ActiuniAbbreviation = "PDC",
                            ActiuniDescription = "Proiecte pentru dezvoltarea comunităților",
                            ActiuniName = "Proiecte de dezvoltare comunitară"
                        },
                        new
                        {
                            ActiuniId = 27,
                            ActiuniAbbreviation = "AJG",
                            ActiuniDescription = "Programe de asistență juridică gratuită",
                            ActiuniName = "Asistență juridică gratuită"
                        },
                        new
                        {
                            ActiuniId = 28,
                            ActiuniAbbreviation = "SFA",
                            ActiuniDescription = "Activități de sprijin pentru persoanele fără adăpost",
                            ActiuniName = "Sprijin pentru persoane fără adăpost"
                        },
                        new
                        {
                            ActiuniId = 29,
                            ActiuniAbbreviation = "SD",
                            ActiuniDescription = "Programe de sprijin pentru persoanele dependente de diverse substanțe",
                            ActiuniName = "Sprijin pentru dependenți"
                        },
                        new
                        {
                            ActiuniId = 30,
                            ActiuniAbbreviation = "EIT",
                            ActiuniDescription = "Programe de educație în domeniul tehnologiei informației",
                            ActiuniName = "Educație IT"
                        });
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Leucemie"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Cancer"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Donare de sânge"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Donare de organe"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Voluntariat"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Educație"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Mediu"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Cultură"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Drepturile omului"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Ajutor umanitar"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Sănătate"
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "Animale"
                        },
                        new
                        {
                            CategoryId = 13,
                            CategoryName = "Sport"
                        },
                        new
                        {
                            CategoryId = 14,
                            CategoryName = "Tineret"
                        },
                        new
                        {
                            CategoryId = 15,
                            CategoryName = "Femei"
                        },
                        new
                        {
                            CategoryId = 16,
                            CategoryName = "Copii"
                        },
                        new
                        {
                            CategoryId = 17,
                            CategoryName = "Vârstnici"
                        },
                        new
                        {
                            CategoryId = 18,
                            CategoryName = "Persoane cu dizabilități"
                        },
                        new
                        {
                            CategoryId = 19,
                            CategoryName = "Comunități defavorizate"
                        },
                        new
                        {
                            CategoryId = 20,
                            CategoryName = "Refugiați"
                        },
                        new
                        {
                            CategoryId = 21,
                            CategoryName = "Educație financiară"
                        },
                        new
                        {
                            CategoryId = 22,
                            CategoryName = "Asistență juridică"
                        },
                        new
                        {
                            CategoryId = 23,
                            CategoryName = "Proiecte de dezvoltare"
                        },
                        new
                        {
                            CategoryId = 24,
                            CategoryName = "Sprijin psihologic"
                        },
                        new
                        {
                            CategoryId = 25,
                            CategoryName = "Antreprenoriat social"
                        },
                        new
                        {
                            CategoryId = 26,
                            CategoryName = "Proiecte culturale"
                        },
                        new
                        {
                            CategoryId = 27,
                            CategoryName = "Protecția mediului"
                        },
                        new
                        {
                            CategoryId = 28,
                            CategoryName = "Ajutor pentru persoane fără adăpost"
                        },
                        new
                        {
                            CategoryId = 29,
                            CategoryName = "Lupta împotriva sărăciei"
                        },
                        new
                        {
                            CategoryId = 30,
                            CategoryName = "Sprijin pentru dependenți"
                        });
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("ActiuniId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("ActiuniId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("ProfileBio")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("ProfilePublic")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendId"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int?>("ActiuniId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("User1_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User2_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendId");

                    b.HasIndex("ActiuniId");

                    b.HasIndex("User1_Id");

                    b.HasIndex("User2_Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Comment", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Post", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.Actiuni", "Actiuni")
                        .WithMany("Posts")
                        .HasForeignKey("ActiuniId");

                    b.HasOne("ConexiuniNonProfit.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Actiuni");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Profile", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ConexiuniNonProfit.Models.Profile", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Friend", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.Actiuni", "Actiuni")
                        .WithMany()
                        .HasForeignKey("ActiuniId");

                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", "User1")
                        .WithMany()
                        .HasForeignKey("User1_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", "User2")
                        .WithMany()
                        .HasForeignKey("User2_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actiuni");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConexiuniNonProfit.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Actiuni", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ConexiuniNonProfit.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
